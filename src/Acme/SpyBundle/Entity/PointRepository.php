<?php

namespace Acme\SpyBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PointRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointRepository extends EntityRepository
{
    public function findTheNearestPoints($latitude, $longitude, $distance)
    {
        if (0){ // dont work function 'acos'
			return $this->getEntityManager($latitude, $longitude, $distance)
				->createQuery('SELECT id, title, latitude, longitude, (((acos(sin(('.$latitude.' * pi() / 180)) * sin((latitude * pi() / 180)) +
												                        cos(('.$latitude.' * pi() / 180)) * cos((latitude * pi() / 180)) *
												                        cos(('.$longitude.' - longitude) * pi() / 180))
												                       ) * 180 / pi()
												                      )* 60 * 1.1515 * 1.609344 * 1000
												                     ) as distance FROM AcmeStoreBundle:Point HAVING distance < '.$distance.' ORDER BY distance ASC')
				->getResult();
        }

		$stmt = $this->getEntityManager()
		           ->getConnection()
		           ->prepare('SELECT id, title, latitude, longitude, (((acos(sin((:latitude1 * pi() / 180)) * sin((latitude * pi() / 180)) +
											                        cos((:latitude2 * pi() / 180)) * cos((latitude * pi() / 180)) *
											                        cos((:longitude - longitude) * pi() / 180))
											                       ) * 180 / pi()
											                      )* 60 * 1.1515 * 1.609344 * 1000
											                     ) as distance FROM Point HAVING distance < :distance ORDER BY distance ASC');
		$stmt->bindValue('latitude1', $latitude);
		$stmt->bindValue('latitude2', $latitude);
		$stmt->bindValue('longitude', $longitude);
		$stmt->bindValue('distance', $distance);
		$stmt->execute();
		return $stmt->fetchAll();
    }
}
